{% block header %}
/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */
{% endblock %}

{% block imports %}
import type * as Directus from "@directus/sdk";

{% endblock %}

export namespace Types {
{% block types %}
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;
  export type PrimaryKey<T> = T;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
  export type Enum = string;

{% endblock %}
}

/**
 * All collection types.
 */
export namespace Collections {

{% for collection in registry.collections | skip_collections(skipCollections) -%}
{% if collection.is_system %}

{%- set field_count = collection.fields | only_custom_fields | length -%}
  {% filter comment -%}
  The resolved {{ collection.name | to_collection_text }} collection type.
  {% endfilter %}
  export type {{ collection.name | to_collection_name }} = Directus.{{ collection.name | to_collection_name }}<System>;
{% endif %}
{% endfor %}

{% for collection in registry.collections -%}
{% if not collection.is_system %}
  /**
   * The {{ collection.name | space_case | lower_case }} collection.
   */
  export interface {{ collection.name | pascal_case }} {
{%- for field in collection.fields %}
{%- set type = field | to_ts_type -%}
{%- if type != 'never' %}
  {{ field.name | to_ts_identifier }}: {{ type }};
{%- endif -%}
{%- endfor %}
  }
{% endif %}
{% endfor %}
}

/**
 * System schema extensions.
 */

export interface System {

{% for collection in registry.collections | skip_collections(skipCollections) -%}
{% if collection.is_system %}

  {% filter comment -%}
  The definition for the {{ collection.name | to_collection_text }} system collection.
  {% endfilter %}
  {{ collection.name }}: {
    {%- for field in collection.fields | only_custom_fields %}
      {%- set type = field | to_ts_type -%}
      {%- if type != 'never' %}
        {{ field.name | to_ts_identifier }}: {{ type }};
      {%- endif -%}
    {%- endfor %}
  }{{ "" if collection.is_singleton else "[]" }};

{% endif %}
{% endfor %}

}

/**
 * Schema definition.
 */
export interface Schema extends System {
{% for collection in registry.collections -%}
  {% if not collection.is_system %}
  {% set suffix = "" if collection.is_singleton else "[]" %}
  /**
   * The {{ collection.name | to_collection_text }} collection.
   */
  {{ collection.name | to_ts_identifier }}: Collections.{{ collection.name | pascal_case }}{{ suffix }};
  {% endif %}
{% endfor %}
}



